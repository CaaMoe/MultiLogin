# =========================================================
# ⚙️ 数据库设置 (Database Settings)
# =========================================================
# 指定 HikariCP 数据库配置文件路径. 
# 用于配置数据库连接池参数. 
# 示例: "hikari.properties"
# 默认值: "hikari.properties"
database-config-path = "hikari.properties"


# =========================================================
# 🔐 身份验证模式 (Authentication Mode)
# =========================================================
# 选择此服务器的玩家身份验证模式. 
#
# 可用选项: 
#
#   local  → 使用本地验证(例如 online-mode 或 authlib-injector). 
#             需要启用服务器的 "online-mode". 
#             (插件会强制启用 online-mode, 即使你在 server.properties 中设置为 false)
#             玩家可直接连接至本服务器. 
#
#   remote → 使用远程验证服务. 
#             需要服务器启用 "accepts-transfers". 
#             玩家先在远程验证服务器登录成功, 
#             然后通过 transfer 协议携带签名 Cookie 中转至本服务器. 
#
#   mixed  → 同时支持本地与远程验证. 
#             需要服务器同时启用 "online-mode" 与 "accepts-transfers". 
#             玩家既可直接登录本地, 也可通过远程验证登录. 
#
# 默认值: "local"
auth-mode = "local"


# =========================================================
# 🧩 本地身份验证服务 (Local Authentication Service)
# =========================================================
# 本地身份验证服务的配置. 
# 仅当 `auth-mode` 为 "local" 或 "mixed" 时生效.
#
# ⚠️ 注意: 
#   此处仅包含必要字段与基础信息.
#   若你希望覆盖默认的策略(如 UUID、名称冲突处理等),
#   可复制 `default-auth-service-option` 节点中的相关字段并粘贴修改.
local-auth-service = {

  # ---------------------------------------------------------
  # 基本信息 (Basic Information)
  # ---------------------------------------------------------

  # 本地身份验证服务的唯一标识符. 
  # 示例: "local_auth"
  # 必填字段, 且必须在所有服务中唯一.
  #
  # ⚠️ 注意: 此字段设置成功后请勿更改, 否则将导致用户角色数据丢失.
  id = "local_auth"

  # 向玩家显示的身份验证服务名称. 
  # 支持 MiniMessage 格式. 
  # 示例: "<green>本地验证</green>"
  # 默认值: "<green>Unnamed Authentication</green>"
  display-name = "<green>Unnamed Authentication</green>"
}


# =========================================================
# 🌐 默认身份验证服务选项 (Default Auth Service Option)
# =========================================================
# 该节点为所有身份验证服务提供默认策略.
# 若服务未单独设置相应字段, 将自动使用此处定义的默认值.
#
# ✅ 如果你想让 local-auth-service 或 remote-auth-service 使用自定义策略,
#    请将以下对应字段复制到目标服务节点内并进行修改.
default-auth-service-option = {

  # ---------------------------------------------------------
  # UUID 策略
  # ---------------------------------------------------------
  # 初始角色的 UUID 生成策略.
  # 可选项:
  #   - random  → 生成随机 UUID.
  #   - offline → 生成离线模式 UUID.
  #   - inherit → 保留原始 UUID.
  # 默认值: "inherit"
  uuid-init-policy = "inherit"

  # 当尝试生成初始角色的 UUID 冲突时的处理策略.
  # 可选项:
  #   - random → 生成新的随机 UUID.
  #   - reject → 拒绝玩家登录.
  # 默认值: "random"
  uuid-conflict-policy = "random"


  # ---------------------------------------------------------
  # 名称策略
  # ---------------------------------------------------------
  # 初始角色的名称格式字符串.
  # 占位符:
  #   %name% → 玩家原始名称
  # 示例: "%name%"
  # 默认值: "%name%"
  name-init-format = "%name%"

  # 当尝试生成初始角色的名称冲突时的处理策略.
  # 可选项:
  #   - increment-right-truncate → 名称末尾递增数字, 递增后过长将从右侧截断.
  #   - increment-left-truncate  → 名称末尾递增数字, 递增后过长将从左侧截断.
  #   - increment                → 名称末尾递增数字(不截断), 递增后过长将拒绝玩家登录.
  #   - reject                   → 拒绝玩家登录.
  # 默认值: "increment-right-truncate"
  name-conflict-policy = "increment-right-truncate"


  # ---------------------------------------------------------
  # 白名单控制
  # ---------------------------------------------------------
  # 是否启用白名单.
  # 启用后, 通过此验证方式登录的玩家仅持有效白名单才可连接到此服务器.
  # 默认值: false
  whitelist = false
}


# =========================================================
# ⚙️ 其他配置 (Miscellaneous Settings)
# =========================================================

# 是否禁用在接收到客户端登录请求(Hello 包)时的用户名规范检查.
# 若禁用, 将跳过用户名格式校验.
# 用户名规范要求:
#   - 名称不能为空;
#   - 长度 ≤ 16;
#   - 仅允许字母、数字、下划线(_);
# ⚠️ 注意: 禁用此检查可能导致异常玩家名或潜在安全风险.
disable-hello-packet-username-validation = false


# ---------------------------------------------------------
# 🔁 快速重连配置 (Reconnect Feature)
# ---------------------------------------------------------
# 是否启用 "快速重连 (reconnect)" 特性.
# 启用后, 当玩家: 
#   - 在游戏中更改当前使用角色的用户名;
#   - 在游戏中切换角色;
# 将自动通过 transfer 协议重新连接到当前服务器,
# 无需手动重新登录, 如果关闭, 部分功能将失效,
# 并且玩家要手动重新登录到服务器.
#
# ⚠️ 注意: 
#   若启用此功能, 必须在 `local-rsa` 节点中提供
#   有效的 RSA 公钥与私钥信息, 用于签发与验证 Cookie.
reconnect-feature = {

  # 是否启用快速重连功能.
  # 默认值: true
  enable = true

  # 玩家在重连时转发的服务器地址.
  # 若留空, 将默认使用当前服务器地址.
  # 示例: "mc.example.com:25565"
  reconnect-address = ""
}


# ---------------------------------------------------------
# 🔑 本地 RSA 签名配置 (Local RSA Configuration)
# ---------------------------------------------------------
# 若启用了 "快速重连 (rejoin-feature)" 功能, 
# 则需要提供 RSA 密钥信息用于签发与验证玩家的会话 Cookie. 
#
# ⚠️ 注意: 
#   - 私钥仅用于签发 Cookie, 请妥善保管, 避免泄露. 
#   - 公钥用于验证回传的 Cookie 签名. 
#   - 若密钥文件不存在, 插件可能无法正确验证重连请求. 
local-rsa = {

  # RSA 公钥文件路径. 
  # 用于验证签名数据. 
  # 示例: "keys/public.pem"
  public-key-path = "keys/local-public-key.pem"

  # RSA 私钥文件路径. 
  # 用于签发签名数据. 
  # 示例: "keys/private.pem"
  private-key-path = "keys/local-private-key.pem"

  # 数字签名算法. 
  # 推荐值: "SHA512withRSA"
  # 其他可用算法(取决于 JDK 支持): 
  #   - SHA256withRSA
  #   - SHA384withRSA
  # 默认值: "SHA512withRSA"
  verify-digital-signature-algorithm = "SHA512withRSA"
}

# ---------------------------------------------------------
# 🧍 角色限制 (Profile Limit)
# ---------------------------------------------------------
# 用于限制玩家在游戏中角色的各种操作.
profile-limit = {

  # 用于限制玩家在游戏中可使用的槽位数量(这个数量不论如何都会大于等于 1)
  # ⚙️ 权限判断规则：
  #   - 检查顺序与下方配置顺序一致;
  #   - 若玩家同时拥有多个匹配权限, 仅第一个生效;
  #   - 若无匹配权限, 则使用 `default-max-slot-count` 槽位数量.
  # key 为权限节点, value 为允许创建的最大角色数.
  #
  # 示例：
  #   玩家拥有权限 "multilogin.slots.vip" → 可创建 5 个角色;
  #   若无任何权限 → 使用默认槽位数量 (2).
  permission-max-slot-counts = {
    "multilogin.create.slots.vip" = 5
    "multilogin.create.slots.mvp" = 8
    "multilogin.create.slots.admin" = 16
  }

  # 默认的玩家可在游戏中使用的槽位数量(这个数量不论如何都会大于等于 1)
  # 默认值: 2
  default-max-slot-count = 2

  # 用于限制玩家在游戏中给角色起的名字限制.
  # 默认值: "^[a-zA-Z0-9_]{1,16}$"
  profile-name-regular-expression-restriction = "^[a-zA-Z0-9_]{1,16}$"
}