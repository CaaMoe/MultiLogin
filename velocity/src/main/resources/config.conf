###########################################################################
#             这里是 MultiLogin 的主配置文件, 格式使用 "HOCON"
#
#      访问 "https://github.com/lightbend/config/blob/master/HOCON.md"
#   可了解有关 HOCON 配置文件格式的过多信息.
#
#     问题和建议反馈请前往 "https://github.com/CaaMoe/MultiLogin/issues".
###########################################################################

# 是否将 Debug 级别的日志重定向为 Info 级别的日志.
# 一般情况下维持默认值就好, 除非你想排查关于这个插件的一些问题.
#
# 默认值 false
debug: false

# 指令相关的设定.
command_setting: {

  # 风险指令确认等待时间.
  # 单位 秒
  #
  # 默认值 15
  confirm_await_second: 15

  # Link 请求确认等待时间.
  # 单位 秒
  #
  # 默认值 60
  link_accept_confirm_await_second: 60
}

# 名称相关的设定.
profile_name_setting: {

  # 所生成的新档案的名字如果过长, 是否从尾部自动截短名称(原版 MC 不让名字超过 16 个字符的档案游戏).
  #
  # 例子:
  #  1. 如果生成的档案名字为 "Baka_YourName_Baka",   根据规则, 它将被截短为 ”Baka_YourName_Ba“
  #  2. 如果生成的档案名字为 "12345678901234567890", 根据规则, 它将被截短为 ”1234567890123456“
  #
  # 如果此项配置被关闭, 当生成了个新的档案给用户时只要名字超过 16 个字符, 将拒绝当前玩家登录游戏. 除非它手动更改自己的用户名.
  #
  # 默认值 true
  auto_cutting: true

  # 所生成的新档案的名字如果已被别的档案占用, 是否自动给它的档案名称后面 +1.
  #
  # 例子:
  #  1. 如果生成的档案名字重复, 为 "Steven",    根据规则, 它将被调整为 "Steven1"
  #  2. 如果生成的档案名字重复, 为 "Steven455", 根据规则, 它将被调整为 "Steven456"
  #  3. 如果生成的档案名字重复, 为 "Steven459", 根据规则, 它将被调整为 "Steven460"
  #  4. 如果生成的档案名字重复, 为 "Steven999", 根据规则, 它将被调整为 "Steven1000"
  #
  # 如果调整后的名字过长, 他将会在 "中间截短(截短递增体之前的部分)"
  # 中间截短例子:
  #  1. 如果 +1 后的名称过长, 为 "Steven78901234567", 根据规则, 它将被截短为 "Steve78901234567"
  #  2. 如果 +1 后的名称过长, 为 "12345678901234567", 根据规则, 它将被截短为 "2345678901234567"
  # 当然, 如果截短后的名称依然已被使用, 它将返回第一步重新计算, 直到腾出一个可用的用户名出来.
  #
  # 如果此项配置被关闭, 当生成了个新的档案给新用户时只要名字异常占用, 将拒绝当前玩家登录游戏. 除非它手动更改自己的用户名.
  #
  # 默认值 true
  auto_increment: true

  # 设置用户名正则.
  # 若不匹配将会拒绝指令或当前玩家的登录请求.
  # 如果此值留空, 则不启用此功能.
  #
  # 默认值 "^[a-zA-Z0-9_]+$"
  allowed_regular: "^[a-zA-Z0-9_]+$"
}

# 档案离线登录设定.
# 离线登录不支持新注册用户, 仅能登录到游戏内已经存在的档案.
#
# 注意, 这是实验性的!!!
offline_auth_setting: {

  # 离线登录总开关.
  # 开启后玩家可以通过特定的入口绕过外置(正版)验证直接加入游戏.
  #
  # 默认值 false
  enable: false

  # 离线入口绑定的 host 地址.
  # 所有通过此入口进入的玩家将绕过外置(正版)验证直接加入游戏.
  #
  # 当 enable 为 true 时, 此列表需要至少存在一个值.
  bind_hosts: [
    "offline.example.com"
  ]

  # 若想启用离线登录, 则需要设置一个可以让离线登录的玩家临时暂存的后端服务器,
  # 而离线玩家将会在这里来验证它们想要登录的档案的所有权, 验证通过后才会将它们传送到正常的服务器中.
  #
  # 需要注意的是, MultiLogin 只会限制未验证用户发言、指令和限制它唯一活动的服务器, 不会限制玩家方块挖掘、人偶动作以及其他可以影响到任何游戏内容的部分,
  # 所以, 你需要精心设计一个服务器来限制玩家的行为. 比如说你可以制作全局给玩家添加"致盲"、“缓慢”特效的插件, 然后只保留主世界这一个维度, 调整好游戏规则和默认游戏模式就好了.
  #
  # 当 enable 为 true 时, 此值需设置为已存在的服务器名称
  bind_plank_server: "login"

  # 设置离线验证通过后将要把玩家传送到哪个服务器中.
  #
  # 当 enable 为 true 时, 此值需设置为已存在的服务器名称
  auth_success_transfer: "game"

  # 智能解析从客户端连接到当前代理所使用的连接信息来分析玩家希望登录到游戏中的档案.
  # 如果没有模式匹配到任何内容, 当前离线登录玩家将尝试使用客户端启动器启动前设置的游戏名称加入游戏,
  #
  # 例子:
  #  (例子中使用到的配置: starts_with: "offline.", ends_with: ".example.com")
  #  (例子中客户端在启动器设置的名称: "Steven")
  #  1. 客户端使用host "offline.example.com" 加入游戏时, 它将尝试登录到游戏档案 "Steven".
  #  2. 客户端使用host "offline.Alex.example.com" 加入游戏时, 它将尝试登录到游戏档案 "Alex".
  #  3. 客户端使用host "offline.A.啊.a.example.com" 加入游戏时, 它将尝试登录到游戏档案 "A.啊.a"(前提是确实存在这么逆天的名称).
  #
  # 注意, 此项内容与 bind_host 不冲突
  choose_profile_name_from_host_setting: {

    # 功能开关
    enable: false

    # 匹配规则
    patterns: [
      {
        # 模式前缀
        starts_with: "offline."
        # 模式后缀
        ends_with: ".example.com"
      }
    ]
  }

  # todo auth setting...
}

# 数据库设置.
# 在这里, 设置插件的数据库.
database: {

  # 自动下载 jdbc 驱动包.
  # 可用的选项:
  #
  # - "none"
  # - "h2":
  # - "mariadb":
  # - "mysql":
  # - "oracle":
  # - "postgresql":
  # - "pjdbc_ng":
  # - "microsoftsqlserver":
  # - "sqlite":
  #
  # 可选值, 默认 "none"
  load_driver: ""

  # 数据库所连接的数据源.
  # 参数可以参考 "https://github.com/brettwooldridge/HikariCP" 项目介绍中的 "Configuration (knobs, baby!)".
  #
  # 需要注意的是, 配置键名需要严格按照 "下划线命名法", 比如你需要将 "driverClassName"、"jdbcUrl"
  # 等键名称手动更改为 "driver_class_name"、"jdbc_url".
  data_source: {
    pool_name: "MultiLoginPool"
  }
}